import { Router } from "@grammyjs/router";
import { CustomContext } from "../types/CustomContext.js";
import { keyboardChooseMatch, keyboardPause, keyboardProfile, keyboardRate } from "../keyboards/index.js";
import { prisma } from "../prisma/index.js";
import { Chat } from "grammy/types";

const router = new Router<CustomContext>((ctx) => {
    return ctx.session.route
});

const chooseMatchesProfiles = router.route("chooseMatchesProfiles");

chooseMatchesProfiles.on('msg:text', async (ctx) => {
    if (ctx.msg.text === keyboardChooseMatch(ctx).labels[0]) {
        if (!ctx.session.shownMatchProfile) ctx.session.shownMatchProfile = 0
        await startShowMatchProfiles(ctx)
        ctx.session.route = 'showMatchesProfiles'
    }
    if (ctx.msg.text === keyboardChooseMatch(ctx).labels[1]) {
        await ctx.reply(keyboardChooseMatch(ctx).labels[1])
    }
})

const showMatchesProfiles = router.route("showMatchesProfiles");

showMatchesProfiles.on('msg:text', async (ctx) => {
    if (ctx.msg.text === "üí§") { }
    else if (ctx.msg.text === "üëé") { 
        await prisma.match.delete({
            where: {
                fromId_toId: {
                    fromId: ctx.session.activeMatchProfile!.platformId,
                    toId: ctx.session.myProfile!.platformId
                }
            }
        })
    }
    else if (ctx.msg.text === "‚ù§Ô∏è") {
        await prisma.match.delete({
            where: {
                fromId_toId: {
                    fromId: ctx.session.activeMatchProfile!.platformId,
                    toId: ctx.session.myProfile!.platformId
                }
            }
        })

        if ((await ctx.api.getChat(ctx.session.myProfile.platformId) as Chat.PrivateGetChat).has_private_forwards) {
            await ctx.reply(`‚ùóÔ∏è –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–∑-–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ Telegram.\nüòü –¢–µ–±–µ –Ω–µ –º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–¥–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É —Ç–µ–±—è –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è.\n\n‚ù§Ô∏è –ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ Telegram:\nüëâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏‚û°Ô∏è–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å‚û°Ô∏è–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π‚û°Ô∏è–ö—Ç–æ –º–æ–∂–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è‚û°Ô∏è–í—Å–µ`)
        }
        if((await ctx.api.getChat(ctx.session.activeMatchProfile!.platformId) as Chat.PrivateGetChat).has_private_forwards){
            await ctx.api.sendMessage(ctx.session.activeMatchProfile!.platformId,`‚ùóÔ∏è –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–∑-–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ Telegram.\nüòü –¢–µ–±–µ –Ω–µ –º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–¥–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É —Ç–µ–±—è –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è.\n\n‚ù§Ô∏è –ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ Telegram:\nüëâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏‚û°Ô∏è–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å‚û°Ô∏è–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π‚û°Ô∏è–ö—Ç–æ –º–æ–∂–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è‚û°Ô∏è–í—Å–µ`)
        }

        await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;) –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è üëâ <a href="${`tg://user?id=${ctx.session.activeMatchProfile!.platformId}`}">${ctx.session.activeMatchProfile!.name}</a>`, {
            parse_mode: "HTML", link_preview_options: {
                is_disabled: true
            }
        })
        // console.log((await ctx.api.getChat(ctx.session.activeMatchProfile!.platformId) as Chat.PrivateGetChat).has_private_forwards, (await ctx.api.getChat(ctx.session.myProfile.platformId) as Chat.PrivateGetChat).has_private_forwards)
        await ctx.api.sendMessage(ctx.session.activeMatchProfile!.platformId, `–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è üëâ <a href="tg://user?id=${ctx.session.myProfile!.platformId}">${ctx.session.myProfile!.name}</a>`, {
            parse_mode: "HTML",
            link_preview_options: {
                is_disabled: true
            },

        })
    }
})

const startShowMatchProfiles = async (ctx: CustomContext) => {
    
    let matches: any = await prisma.match.findMany({

        where: {
            toId: ctx.session.myProfile.platformId
        },
        include: {
            from: {
                select: {
                    name: true,
                    sex: true,
                    age: true,
                    interest: true,
                    description: true,
                    city: true,
                    media: true,
                    platformId: true,
                    published: true
                }
            }
        }

    })
    const profile = matches[ctx.session.shownMatchProfile!].from
    console.log(profile)
    ctx.session.activeMatchProfile = profile
    const getMedia = await ctx.api.getFile(profile.media);
    const isVideoMedia = (getMedia.file_path as string).includes("videos");
    await ctx[isVideoMedia ? "replyWithVideo" : "replyWithPhoto"](
        profile.media,
        {
            reply_markup: keyboardRate,
            caption: `–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ ${matches.length > 1 ? `(–∏ –µ—â–µ ${matches.length})` : ''}\n\n${profile.name}, ${profile.age
                }, ${profile.city}  ${profile.description
                    ? "- " + profile.description
                    : ""
                }`,
        }
    );
    ctx.session.route = "showMatchesProfiles"
}

// const showMatchProfile = async (ctx: CustomContext) => {

// }

export { router }
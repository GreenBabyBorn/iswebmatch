import { Router } from "@grammyjs/router";
import { CustomContext } from "../types/CustomContext.js";
import {
  keyboardChooseMatch,
  keyboardPause,
  keyboardProfile,
  keyboardRate,
} from "../keyboards/index.js";
import { showProfile } from "../composers/index.js";
import { prisma } from "../prisma/index.js";
import { startShowProfile } from "./profile.js";

const router = new Router<CustomContext>((ctx) => {
  return ctx.session.route;
});

const showNewProfiles = router.route("showNewProfiles");

showNewProfiles.on("msg:text", async (ctx) => {
  if (ctx.msg.text === "üí§") {
    await ctx.reply("–ü–æ–¥–æ–∂–¥–µ–º –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ —É–≤–∏–¥–∏—Ç —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É");
    await ctx.reply(
      "1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã. \n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞. \n3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.",
      { reply_markup: keyboardPause }
    );
    ctx.session.route = "pauseShow";
  } else if (ctx.msg.text === "üëé") {
    ctx.session.profiles = await prisma.profile.findMany({
      take: 1,
      skip: 1,
      cursor: {
        platformId: ctx.session.profiles![0].platformId,
      },
      where: {
        platformId: {
          not: ctx.from?.id.toString() as string,
        },
        sex:
          ctx.session.myProfile?.interest === 3
            ? undefined
            : ctx.session.myProfile?.interest,
      },
    });
    if (!ctx.session.profiles[0]) {
      ctx.session.profiles = await prisma.profile.findMany({
        take: 1,
        where: {
          platformId: {
            not: ctx.from?.id.toString() as string,
          },
          sex:
            ctx.session.myProfile?.interest === 3
              ? undefined
              : ctx.session.myProfile?.interest,
        },
      });
    }
    // let count = ctx.session.shownProfile!
    const getMedia = await ctx.api.getFile(ctx.session.profiles![0].media);
    const isVideoMedia = (getMedia.file_path as string).includes("videos");
    await ctx[isVideoMedia ? "replyWithVideo" : "replyWithPhoto"](
      ctx.session.profiles![0].media,
      {
        reply_markup: keyboardRate,
        caption: `${ctx.session.profiles![0].name}, ${
          ctx.session.profiles![0].age
        }, ${ctx.session.profiles![0].city}  ${
          ctx.session.profiles![0].description
            ? "- " + ctx.session.profiles![0].description
            : ""
        }`,
      }
    );
    ctx.session.route = "showNewProfiles";
  } else if (ctx.msg.text === "‚ù§Ô∏è") {
    await prisma.match.create({
      data: {
        fromId: ctx.session.myProfile.platformId,
        toId: ctx.session.profiles![0].platformId,
      },
    });

    // * –í—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏—è –ª–∞–π–∫–∞
    let matches = await prisma.match.findMany({
      where: {
        toId: ctx.session.profiles![0].platformId,
      },
      include: {
        from: {
          select: {
            name: true,
            sex: true,
            age: true,
            interest: true,
            description: true,
            city: true,
            media: true,
            platformId: true,
            published: true,
          },
        },
      },
    });
    // console.log(matches)

    const getSessionUser = await prisma.session.findFirst({
      where: {
        key: ctx.session.profiles![0].platformId,
      },
    });
    let parsedSessionUser = JSON.parse(getSessionUser!.value);
    // ! –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞–≤–ª–∏ –µ–º—É –ª–∞–π–∫, —Ç–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    parsedSessionUser.route = "chooseMatchesProfiles";
    await prisma.session.update({
      where: {
        key: ctx.session.profiles![0].platformId,
      },
      data: {
        value: JSON.stringify(parsedSessionUser),
      },
    });

    let matchText = "";
    let matchWhoText = "";
    if (ctx.session.profiles![0].interest === 0 && matches.length > 1)
      (matchText = "–¥–µ–≤—É—à–∫–∞–º"), (matchWhoText = "–∏—Ö");
    else if (ctx.session.profiles![0].interest === 0)
      (matchText = "–¥–µ–≤—É—à–∫–µ"), (matchWhoText = "–µ—ë");
    if (ctx.session.profiles![0].interest === 1 && matches.length > 1)
      (matchText = "–ø–∞—Ä–Ω—è–º"), (matchWhoText = "–∏—Ö");
    else if (ctx.session.profiles![0].interest === 1)
      (matchText = "–ø–∞—Ä–Ω—é"), (matchWhoText = "–µ–≥–æ");

    await ctx.api.sendMessage(
      ctx.session.profiles![0].platformId,
      `–¢—ã ${ctx.session.profiles![0].sex ? "–ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è" : "–ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å"} ${
        matches.length
      } ${matchText}, –ø–æ–∫–∞–∑–∞—Ç—å ${matchWhoText}?
          \n1. –ü–æ–∫–∞–∑–∞—Ç—å.\n2. –ù–µ —Ö–æ—á—É –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ —Å–º–æ—Ç—Ä–µ—Ç—å.`,
      {
        reply_markup: keyboardChooseMatch(ctx).keyboard,
      }
    );

    //---------------------------------
    ctx.session.profiles = await prisma.profile.findMany({
      take: 1,
      skip: 1,
      cursor: {
        platformId: ctx.session.profiles![0].platformId,
      },
      where: {
        platformId: {
          not: ctx.from?.id.toString() as string,
        },
        sex:
          ctx.session.myProfile?.interest === 3
            ? undefined
            : ctx.session.myProfile?.interest,
      },
    });

    if (!ctx.session.profiles[0]) {
      ctx.session.profiles = await prisma.profile.findMany({
        take: 1,
        where: {
          platformId: {
            not: ctx.from?.id.toString() as string,
          },
          sex:
            ctx.session.myProfile?.interest === 3
              ? undefined
              : ctx.session.myProfile?.interest,
        },
      });
    }

    await showProfile(ctx, ctx.session.profiles![0], true);
  }
});

const pauseShow = router.route("pauseShow");

pauseShow.on("msg:text", async (ctx) => {
  if (ctx.msg.text === "1") {
    await ctx.reply("‚ú®üîç");
    await startShowProfile(ctx);
  }

  if (ctx.msg.text === "2") {
    await ctx.reply("–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:");
    await showProfile(ctx, ctx.session.myProfile!);
    await ctx.reply(
      "1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ. \n2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ. \n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã. \n4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
      { reply_markup: keyboardProfile }
    );
    ctx.session.route = "profile";
  }
});

export { router };
